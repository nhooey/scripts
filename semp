#!/usr/bin/perl
# Does a semaphore p on a named lock, and executes a program, then does a semaphore v

use strict;
use File::Basename;

$| = 1; # Set flush

sub spinidle($);

my $progname = basename $0;
my $spinchar = '/';
my $semp = 'semp';
my $sempp = 'sempp';
my $semv = 'semv';
my $semvv = 'semvv';
my $semvp = 'semvp';
my $v = 'v';
my $p = 'p';

my $cmd_type = '';
$cmd_type = $v if $progname =~ /$semv|$semvv|$semvp/;
$cmd_type = $p if $progname =~ /$semp|$sempp/;

# Setup the labeled semaphore file
my $file_prefix = '/tmp/semaphore-';
my $label = '';
$label = substr(shift(@ARGV), 2) if ($ARGV[0] =~ /^--/);
my $sem_file = "${file_prefix}${label}";

# If executed as "sempp", then pause initially
if ($progname eq $sempp) {
	# Open the file
	open SEMAPHORE, "> $sem_file"
		or die "$progname: Failed to open $sem_file for writing.";
	close SEMAPHORE;
}

# If this program is being called as "semvp" then we don't care if the lock
# already exists, but we will create a lock. This is useful for running the
# master lock that might leave the lock laying around when its cmd fails.
if ($cmd_type eq $p) {
	while (-e $sem_file) {
		$spinchar = spinidle $spinchar;
		printf "\r%s", "$spinchar Waiting on semaphore: $label";
		sleep 1;
	}
} else {
	print "\n";
}

# Open the file
open SEMAPHORE, "> $sem_file"
	or die "$progname: Failed to open $sem_file for writing.";

# For semvv, open the semapore immediately
if ($progname eq $semvv) {
	unlink $sem_file;
}

# Execute the user-specified task and output the results
print "\n";
my $return = system @ARGV;
close SEMAPHORE;

# Leave the semaphore if the command failed
if ($cmd_type eq $p or $progname eq $semvp) {
	if ($return == 0) {
		print "Command succeeded, unlocking semaphore: \"$label\".\n";
		unlink $sem_file;
		exit 0;
	} else {
		print "\nCommand failed, leaving semaphore.\n";
		exit 1;
	}
}

# For semv, open the semaphore after the command has launched
if ($progname eq $semv) {
	unlink $sem_file;
}

sub spinidle($)
{
	my $char = $_[0];
	return '-'  if $char eq '/';
	return '\\' if $char eq '-';
	return '|'  if $char eq '\\';
	return '/'  if $char eq '|';

	return '/';
}
